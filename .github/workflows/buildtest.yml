name: Build and test

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              name: "Ubuntu Latest, gcc",
              os: "ubuntu-latest",
              build_type: "Release",
              cc: "gcc",
              cxx: "g++",
              args: ""
            }
          - {
              name: "Ubuntu Latest, clang",
              os: "ubuntu-latest",
              build_type: "Release",
              cc: "clang",
              cxx: "clang++",
              args: ""
            }
          - {
              name: "MacOS Latest, clang",
              os: "macos-latest",
              build_type: "Release",
              cc: "clang",
              cxx: "clang++",
              args: "-DOPENSSL_ROOT_DIR=$(brew --prefix openssl) -DOPENSSL_LIBRARIES=$(brew --prefix openssl)/lib -DOPENSSL_ENGINES_DIR=$(brew --prefix openssl)/lib"
            }

    steps:
    - uses: actions/checkout@v2

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source
      # and build directories, but this is only available with CMake 3.13 and higher.
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} -DBUILD_TESTS=ON -DENABLE_CODECOV=ON ${{ matrix.config.args }}

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config ${{ matrix.config.build_type }}

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{ matrix.config.build_type }}

    - name: Install lcov
      if: matrix.config.os == 'ubuntu-latest'
      run: sudo apt install lcov

    - name: Install lcov
      if: matrix.config.os == 'macos-latest'
      run: brew install lcov

    - name: Generate coverage report
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: |
        lcov --capture --directory . --output-file coverage.info --ignore-errors=inconsistent,mismatch,negative,unused
        lcov --remove coverage.info '/usr/*' --output-file coverage.info --ignore-errors=inconsistent,mismatch,negative,unused # filter system-files
        lcov --remove coverage.info '**/tests/**' --output-file coverage.info --ignore-errors=inconsistent,mismatch,negative,unused # filter tests
        lcov --list coverage.info --ignore-errors=inconsistent,mismatch,negative,unused # debug info

    - name: Codecov
      uses: codecov/codecov-action@v1.0.14
      with:
        file: ${{runner.workspace}}/build/coverage.info
